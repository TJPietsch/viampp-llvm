//===- VIAMPPDisassembler.cpp - Disassembler for VIAMPP ------------------------------------------------------------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===-------------------------------------------------------------------------------------------------------------------------===//
//
// This file is part of the VIAMPP Disassembler.
//
//===-------------------------------------------------------------------------------------------------------------------------===//

#include "VIAMPP.h"
#include "VIAMPPSubtarget.h"
#include "VIAMPPRegisterInfo.h"
#include "llvm/ADT/ArrayRef.h"
#include "MCTargetDesc/VIAMPPMCTargetDesc.h"

#include "llvm/Support/TargetRegistry.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Support/Endian.h"

#include "llvm/MC/MCDisassembler/MCDisassembler.h"
#include "llvm/MC/MCFixedLenDisassembler.h"
#include "llvm/MC/MCSubtargetInfo.h"
#include "llvm/MC/MCAsmInfo.h"
#include "llvm/MC/MCContext.h"
#include "llvm/MC/MCInst.h"
#include "llvm/MC/MCRegisterInfo.h"

#define DEBUG_TYPE "VIAMPP-disassembler"

using namespace llvm;

typedef MCDisassembler::DecodeStatus DecodeStatus;

namespace {

class VIAMPPDisassembler : public MCDisassembler {
public:
	VIAMPPDisassembler(const MCSubtargetInfo &STI, MCContext &Ctx) : MCDisassembler(STI, Ctx) {}

//	~VIAMPPDisassembler() override = default;
	virtual ~VIAMPPDisassembler() {}
//	~VIAMPPDisassembler() {}
//	virtual ~VIAMPPDisassembler() override = default;
	
  // getInstruction - See MCDisassembler.
  DecodeStatus getInstruction(MCInst &Instr, uint64_t &Size, ArrayRef<uint8_t> Bytes, uint64_t Address, raw_ostream &CStream)
                             const override;
};
} // end namespace llvm

//-------------------------------------------------------------------------------------------------------------------------------

namespace llvm {
	extern Target TheVIAMPPTarget;
}

static MCDisassembler *createVIAMPPDisassembler(const Target &T, const MCSubtargetInfo &STI, MCContext &Ctx) {
	return new VIAMPPDisassembler(STI, Ctx);
}

extern "C" LLVM_EXTERNAL_VISIBILITY void LLVMInitializeVIAMPPDisassembler() {
	TargetRegistry::RegisterMCDisassembler(TheVIAMPPTarget, createVIAMPPDisassembler);
}

// Forward declare because the autogenerated code will reference this. Definition is further down.
static DecodeStatus DecodeVRegsRegisterClass(MCInst &Inst, unsigned RegNo, uint64_t Address, const void *Decoder);
static DecodeStatus DecodeSRegsRegisterClass(MCInst &Inst, unsigned RegNo, uint64_t Address, const void *Decoder);
static DecodeStatus DecodeMemoryValue(MCInst &Inst, unsigned Insn, uint64_t Address, const void *Decoder);
static DecodeStatus DecodeMemoryOffsetValue(MCInst &Inst, unsigned Insn, uint64_t Address, const void *Decoder);
#include "VIAMPPGenDisassemblerTables.inc"

static DecodeStatus readInstruction64(ArrayRef<uint8_t> Bytes, uint64_t Address, uint64_t &Size, uint64_t &Insn) {
//	outs().changeColor(raw_ostream::MAGENTA,0);
//	outs() << "VIAMPPDisassembler::readInstruction64\n";
//	outs().changeColor(raw_ostream::WHITE,0);

	uint64_t Hi, Lo;
	// We want to read exactly 8 bytes of data.
	if (Bytes.size() < 8) {
		Size = 0;
//outs() << "readInstruction64: fail: Bytes.size: " << Bytes.size() << "\n";
		return MCDisassembler::Fail;
	}

	// Encoded as big-endian 64-bit word in the stream.
	Hi = (Bytes[0] << 24) | (Bytes[1] << 16) | (Bytes[2] << 8) | (Bytes[3] << 0); 
	Lo = (Bytes[4] << 24) | (Bytes[5] << 16) | (Bytes[6] << 8) | (Bytes[7] << 0);
	Insn = Make_64(Hi, Lo);
//outs() << "readInstruction64: success\n";
	return MCDisassembler::Success;
}

DecodeStatus VIAMPPDisassembler::getInstruction(MCInst &Instr, uint64_t &Size, ArrayRef<uint8_t> Bytes, uint64_t Address,
                                             raw_ostream &CStream) const {
//	outs().changeColor(raw_ostream::MAGENTA,0);
//	outs() << "VIAMPPDisassembler::getInstruction\n";
//	outs().changeColor(raw_ostream::WHITE,0);

	uint64_t Insn;

	DecodeStatus Result = readInstruction64(Bytes, Address, Size, Insn);

	if (Result == MCDisassembler::Fail){
//outs()<<"getInstruction: fail\n";
		return MCDisassembler::Fail;
	}

	// Call auto-generated decoder function
	Result = decodeInstruction(DecoderTable64, Instr, Insn, Address, this, STI);
	if (Result != MCDisassembler::Fail) {
		Size = 8;
		return Result;
	}

	return MCDisassembler::Fail;
}

static unsigned VRegsDecoderTable(unsigned RegNo) {
//	outs().changeColor(raw_ostream::MAGENTA,0);
//	outs() << "VIAMPPDisassembler::VRegsDecoderTable: RegNo: " << RegNo << "\n";
//	outs().changeColor(raw_ostream::WHITE,0);

	// named virtual Registers
	if (RegNo == 0) return VIAMPP::StackPtr; else
	if (RegNo == 1) return VIAMPP::FramePtr; else
	if (RegNo == 2) return VIAMPP::ReturnReg; else
	if (RegNo == 3) return VIAMPP::LinkReg; else
	if (RegNo == 4) return VIAMPP::BaseReg; else
	// all other VRegs
	return VIAMPP::V5 - 5 + RegNo;
}

static DecodeStatus DecodeVRegsRegisterClass(MCInst &Inst, unsigned RegNo, uint64_t Address, const void *Decoder) {
//	outs().changeColor(raw_ostream::MAGENTA,0);
//	outs() << "VIAMPPDisassembler::DecodeVRegsRegisterClass\n";
//	outs().changeColor(raw_ostream::WHITE,0);

	if (RegNo > 255)	// 65536 later ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		return MCDisassembler::Fail;

	Inst.addOperand(MCOperand::createReg(VRegsDecoderTable(RegNo)));
	return MCDisassembler::Success;
}

static const unsigned SRegsDecoderTable[] = {
	// System Registers
	VIAMPP::PC,			VIAMPP::BaseAddr,	VIAMPP::MinAddr,	VIAMPP::MaxAddr,	VIAMPP::SigVal,
	VIAMPP::Alice,		VIAMPP::Bob,		VIAMPP::Counter,	VIAMPP::InOut,		VIAMPP::TrapMask,
	VIAMPP::PrevPC,
	// System Vectors
	VIAMPP::SigVec,		VIAMPP::InpVec,		VIAMPP::AliceVec,	VIAMPP::BobVec,		VIAMPP::RangeVec,
	VIAMPP::BAddrVec,	VIAMPP::IllOpVec,	VIAMPP::CBVec,		VIAMPP::OvflVec,	VIAMPP::DivVec
};

static DecodeStatus DecodeSRegsRegisterClass(MCInst &Inst, unsigned RegNo, uint64_t Address, const void *Decoder) {
//	outs().changeColor(raw_ostream::MAGENTA,0);
//	outs() << "VIAMPPDisassembler::DecodeSRegsRegisterClass\n";
//	outs().changeColor(raw_ostream::WHITE,0);

	if (RegNo > 25)
		return MCDisassembler::Fail;

	unsigned Reg = SRegsDecoderTable[RegNo];
	Inst.addOperand(MCOperand::createReg(Reg));
	return MCDisassembler::Success;
}

static DecodeStatus DecodeMemoryValue(MCInst &Inst, unsigned Insn, uint64_t Address, const void *Decoder) {
//	outs().changeColor(raw_ostream::MAGENTA,0);
//	outs() << "VIAMPPDisassembler::DecodeMemoryValue\n";
//	outs().changeColor(raw_ostream::WHITE,0);

	unsigned Register = Insn & 0xffff;

	Inst.addOperand(MCOperand::createReg(VRegsDecoderTable(Register)));
	return MCDisassembler::Success;
}

static DecodeStatus DecodeMemoryOffsetValue(MCInst &Inst, unsigned Insn, uint64_t Address, const void *Decoder) {
//	outs().changeColor(raw_ostream::MAGENTA,0);
//	outs() << "VIAMPPDisassembler::DecodeMemoryOffsetValue\n";
//	outs().changeColor(raw_ostream::WHITE,0);

	unsigned Register = (Insn >> 16) & 0xffff;
	Inst.addOperand(MCOperand::createReg(VRegsDecoderTable(Register)));
	unsigned Offset = (Insn & 0xffff);
	Inst.addOperand(MCOperand::createImm(SignExtend32<16>(Offset)));
	return MCDisassembler::Success;
}
